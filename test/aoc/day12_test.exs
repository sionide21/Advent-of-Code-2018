defmodule AOC.Day12Test do
  use ExUnit.Case, async: true
  alias AOC.Day12

  test "grow" do
    rules = %{
      "...##" => "#",
      "..#.." => "#",
      ".#..." => "#",
      ".#.#." => "#",
      ".#.##" => "#",
      ".##.." => "#",
      ".####" => "#",
      "#.#.#" => "#",
      "#.###" => "#",
      "##.#." => "#",
      "##.##" => "#",
      "###.." => "#",
      "###.#" => "#",
      "####." => "#"
    } |> Day12.compile_rules()

    assert Day12.grow(String.graphemes("#..#.#..##......###...###"), rules) == String.graphemes("..#...#....#.....#..#..#..#....")
    assert Day12.grow(String.graphemes("#...#....#.....#..#..#..#"), rules) == String.graphemes("..##..##...##....#..#..#..##...")
    assert Day12.grow(String.graphemes("##..##...##....#..#..#..##"), rules) == String.graphemes(".#.#...#..#.#....#..#..#...#....")
  end

  test "add" do
    assert Day12.add(String.graphemes(".#....##....#####...#######....#.#..##."), -3) == 325
  end

  test "count" do
    rules = %{
      "...##" => "#",
      "..#.." => "#",
      ".#..." => "#",
      ".#.#." => "#",
      ".#.##" => "#",
      ".##.." => "#",
      ".####" => "#",
      "#.#.#" => "#",
      "#.###" => "#",
      "##.#." => "#",
      "##.##" => "#",
      "###.." => "#",
      "###.#" => "#",
      "####." => "#"
    } |> Day12.compile_rules()
    start = String.graphemes("#..#.#..##......###...###")

    assert Day12.count(start, 20, rules) == 325
  end

  # test "Part 1" do
  #   rules = %{
  #     "#.###" => ".",
  #     "###.#" => "#",
  #     ".##.." => ".",
  #     "..###" => ".",
  #     "..##." => ".",
  #     "##..." => "#",
  #     "###.." => "#",
  #     ".#..." => "#",
  #     "##..#" => "#",
  #     "#...." => ".",
  #     ".#.#." => ".",
  #     "####." => ".",
  #     "#.#.." => ".",
  #     "#.#.#" => ".",
  #     "#..##" => "#",
  #     ".####" => "#",
  #     "...##" => ".",
  #     "#..#." => "#",
  #     ".#.##" => "#",
  #     "..#.#" => "#",
  #     "##.#." => "#",
  #     "#.##." => "#",
  #     "#####" => ".",
  #     "..#.." => "#",
  #     "....#" => ".",
  #     "##.##" => ".",
  #     ".###." => "#",
  #     "....." => ".",
  #     "...#." => "#",
  #     ".##.#" => ".",
  #     "#...#" => ".",
  #     ".#..#" => "#"
  #   } |> Day12.compile_rules()
  #   start = String.graphemes("#.#..#..###.###.#..###.#####...########.#...#####...##.#....#.####.#.#..#..#.#..###...#..#.#....##.")
  #
  #   assert Day12.count(start, 20, rules) == 325
  # end
  #
  # @tag timeout: :infinity
  # test "Part 2" do
  #   rules = %{
  #     "#.###" => ".",
  #     "###.#" => "#",
  #     ".##.." => ".",
  #     "..###" => ".",
  #     "..##." => ".",
  #     "##..." => "#",
  #     "###.." => "#",
  #     ".#..." => "#",
  #     "##..#" => "#",
  #     "#...." => ".",
  #     ".#.#." => ".",
  #     "####." => ".",
  #     "#.#.." => ".",
  #     "#.#.#" => ".",
  #     "#..##" => "#",
  #     ".####" => "#",
  #     "...##" => ".",
  #     "#..#." => "#",
  #     ".#.##" => "#",
  #     "..#.#" => "#",
  #     "##.#." => "#",
  #     "#.##." => "#",
  #     "#####" => ".",
  #     "..#.." => "#",
  #     "....#" => ".",
  #     "##.##" => ".",
  #     ".###." => "#",
  #     "....." => ".",
  #     "...#." => "#",
  #     ".##.#" => ".",
  #     "#...#" => ".",
  #     ".#..#" => "#"
  #   } |> Day12.compile_rules()
  #   start = String.graphemes("#.#..#..###.###.#..###.#####...########.#...#####...##.#....#.####.#.#..#..#.#..###...#..#.#....##.")
  #
  #   assert Day12.count(start, 50000000000, rules) == 325
  # end
end
